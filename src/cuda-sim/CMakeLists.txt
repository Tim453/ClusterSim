BISON_TARGET(PTXParser "ptx.y" "ptx.tab.cc" 
    COMPILE_FLAGS "--name-prefix=ptx_"
    DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/ptx.tab.h)
FLEX_TARGET(PTXLexer "ptx.l" "lex.ptx_.cc")
add_flex_bison_dependency(PTXLexer PTXParser)

BISON_TARGET(PTXINFOParser "ptxinfo.y" "ptxinfo.tab.cc" 
    COMPILE_FLAGS "--name-prefix=ptxinfo_"
    DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/ptxinfo.tab.h)
FLEX_TARGET(PTXINFOLexer "ptxinfo.l" "lex.ptxinfo_.cc")
add_flex_bison_dependency(PTXINFOLexer PTXINFOParser)


add_custom_command(
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/instructions.h
  COMMAND touch instructions.h
  COMMAND echo "// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED BY THE MAKEFILE (see target for instructions.h)" > instructions.h
  COMMAND echo "#include \"ptx_ir.h\"" >> instructions.h
  COMMAND echo "#ifndef instructions_h_included" >> instructions.h
  COMMAND echo "#define instructions_h_included" >> instructions.h
  COMMAND cat ${CMAKE_CURRENT_SOURCE_DIR}/instructions.cc | grep "_impl(" | sed "s/{.*//" | sed "s/$/;/" >> instructions.h
  COMMAND echo "#endif" >> instructions.h
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/instructions.cc
  COMMENT "Create instructions.h"
  VERBATIM
)

add_custom_command(
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/detailed_version
  COMMAND echo "const char *g_gpgpusim_build_string=\"${GPGPUSIM_BUILD}\";" > detailed_version
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  VERBATIM
)

add_custom_command(
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/ptx_parser_decode.def
  COMMAND cat ${CMAKE_CURRENT_BINARY_DIR}/ptx.tab.h | grep "=" | sed "s/\"//g" | sed "s/^[ ]\\+//" | sed "s/[=,]//g" | sed "s/\\([_A-Z1-9]\\+\\)[ ]\\+\\([0-9]\\+\\)/\\1 \\1/" | sed "s/^/DEF(/" | sed "s/ /,\"/" | sed "s/$/\")/" > ptx_parser_decode.def
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/ptx.tab.h
  VERBATIM
)

file(GLOB SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/*.cc ${CMAKE_CURRENT_SOURCE_DIR}/decuda_pred_table*.cc)
add_compile_definitions(YYDEBUG)
add_library(gpgpu_ptx_sim STATIC 
    ${SOURCES}
    ${BISON_PTXParser_OUTPUTS} 
    ${FLEX_PTXLexer_OUTPUTS}
    ${BISON_PTXINFOParser_OUTPUTS} 
    ${FLEX_PTXINFOLexer_OUTPUTS}
    ${CMAKE_CURRENT_BINARY_DIR}/instructions.h
    ${CMAKE_CURRENT_BINARY_DIR}/detailed_version
    ${CMAKE_CURRENT_BINARY_DIR}/ptx_parser_decode.def
)
target_include_directories(gpgpu_ptx_sim PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
